/*
 * RetrieveMusicApp.java
 *
 * Created on July 17, 2004, 2:39 PM
 */

package musicretrievaldemo;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.net.*;
import java.io.*;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.sound.sampled.*;
import javax.swing.UIManager;
import musicretrievaldemo.fft.*;

/**
 *
 * @author  yke Yan Ke
 */
public class RetrieveMusicApp extends javax.swing.JFrame implements CallbackInterface {
    private MP3Player mp3player;
    private AudioPlayer wavplayer;
    private String RECFN = "recording.wav";
    private String playfn;
    private AudioRecorder recorder;
    private String servername;
    private int serverport;
    private Map songlist;
    private Vector songs = new Vector();
    private float framespersecond = 86.140625f;
    private float endlength = 1.5f;
    private FFTDisplayPanel fftDisplayPanel;
    
    private String getKey(String fn) {
        int pos = fn.lastIndexOf('/') + 1;
        
        return fn.substring(pos, pos + 11);
    }
    
    private Map readSongList(String fn) {
        Map msonglist = new HashMap();
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fn));

            String aline;

            while ((aline = reader.readLine()) != null) {
                String key = getKey(aline);

                //System.out.println(key + " : " + aline);

                msonglist.put(key, aline);
            }
        } catch (java.io.IOException e) {
            System.out.println(e);
        }
        
        return msonglist;
    }
    
    
    /** Creates new form RetrieveMusicApp */
    public RetrieveMusicApp(String songlistfn, String servername, int serverport) {
        initComponents();
        
        fftDisplayHolder.setLayout(null);
        fftDisplayPanel = new FFTDisplayPanel();        
        fftDisplayHolder.add(fftDisplayPanel);  
        fftDisplayPanel.setBounds(0, 0, fftDisplayHolder.getWidth(), fftDisplayHolder.getHeight());
        
        this.servername = servername;
        this.serverport = serverport;
        
        songlist = readSongList(songlistfn);
        
        wavplayer = new AudioPlayer(this);
        wavplayer.start();
        
        mp3player = new MP3Player(this);
        mp3player.start();
        
        recorder = new AudioRecorder(this, RECFN);
        recorder.start();
        
        jButtonPlay.setEnabled(false);
        playfn = RECFN;
        jLabelStatus.setText("Ready...");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        // Generated using JFormDesigner Evaluation license - maor yosef
        jProgressBar = new JProgressBar();
        jLabelStatus = new JLabel();
        jButtonRecord = new JButton();
        jButtonPlay = new JButton();
        jComboBoxRecordTime = new JComboBox();
        jListSongs = new JList();
        jProgressBarLevel = new JProgressBar();
        jLabelLevel = new JLabel();
        jLabel2 = new JLabel();
        jButtonLoad = new JButton();
        jLabel1 = new JLabel();
        fftDisplayHolder = new JPanel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Retrieval Demo v1.0");
        setResizable(false);
        Container contentPane = getContentPane();
        contentPane.setLayout(null);
        contentPane.add(jProgressBar);
        jProgressBar.setBounds(10, 110, 470, 20);

        //---- jLabelStatus ----
        jLabelStatus.setFont(new Font("Dialog", Font.PLAIN, 24));
        jLabelStatus.setText("Status");
        contentPane.add(jLabelStatus);
        jLabelStatus.setBounds(10, 0, 680, 60);

        //---- jButtonRecord ----
        jButtonRecord.setFont(new Font("Dialog", Font.BOLD, 18));
        jButtonRecord.setText("Record");
        jButtonRecord.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButtonRecordActionPerformed(e);
            }
        });
        contentPane.add(jButtonRecord);
        jButtonRecord.setBounds(new Rectangle(new Point(170, 70), jButtonRecord.getPreferredSize()));

        //---- jButtonPlay ----
        jButtonPlay.setFont(new Font("Dialog", Font.BOLD, 18));
        jButtonPlay.setText("Playback");
        jButtonPlay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButtonPlayActionPerformed(e);
            }
        });
        contentPane.add(jButtonPlay);
        jButtonPlay.setBounds(new Rectangle(new Point(282, 70), jButtonPlay.getPreferredSize()));

        //---- jComboBoxRecordTime ----
        jComboBoxRecordTime.setFont(new Font("Dialog", Font.BOLD, 18));
        jComboBoxRecordTime.setModel(new DefaultComboBoxModel(new String[] {
            "3 Seconds",
            "5 Seconds",
            "7 Seconds",
            "10 Seconds",
            "15 Seconds"
        }));
        contentPane.add(jComboBoxRecordTime);
        jComboBoxRecordTime.setBounds(10, 70, 150, 30);

        //---- jListSongs ----
        jListSongs.setFont(new Font("Dialog", Font.BOLD, 16));
        jListSongs.setMinimumSize(new Dimension(10, 10));
        jListSongs.setPreferredSize(new Dimension(20, 20));
        jListSongs.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                jListSongsMouseClicked(e);
            }
        });
        contentPane.add(jListSongs);
        jListSongs.setBounds(10, 140, 680, 200);

        //---- jProgressBarLevel ----
        jProgressBarLevel.setOrientation(SwingConstants.VERTICAL);
        contentPane.add(jProgressBarLevel);
        jProgressBarLevel.setBounds(510, 80, 10, 50);

        //---- jLabelLevel ----
        jLabelLevel.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelLevel.setText("Level");
        contentPane.add(jLabelLevel);
        jLabelLevel.setBounds(490, 60, 50, jLabelLevel.getPreferredSize().height);
        contentPane.add(jLabel2);
        jLabel2.setBounds(690, 530, 10, 10);

        //---- jButtonLoad ----
        jButtonLoad.setFont(new Font("Dialog", Font.BOLD, 18));
        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButtonLoadActionPerformed(e);
            }
        });
        contentPane.add(jButtonLoad);
        jButtonLoad.setBounds(new Rectangle(new Point(410, 70), jButtonLoad.getPreferredSize()));

        //---- jLabel1 ----
        jLabel1.setFont(new Font("MS Sans Serif", Font.PLAIN, 18));
        jLabel1.setText("Signal Analysis");
        contentPane.add(jLabel1);
        jLabel1.setBounds(new Rectangle(new Point(10, 370), jLabel1.getPreferredSize()));

        //======== fftDisplayHolder ========
        {

            // JFormDesigner evaluation mark
            fftDisplayHolder.setBorder(new javax.swing.border.CompoundBorder(
                new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                    "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                    javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                    java.awt.Color.red), fftDisplayHolder.getBorder())); fftDisplayHolder.addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});

            fftDisplayHolder.setLayout(new FlowLayout());
        }
        contentPane.add(fftDisplayHolder);
        fftDisplayHolder.setBounds(10, 430, 680, 100);

        //---- jLabel3 ----
        jLabel3.setFont(new Font("MS Sans Serif", Font.PLAIN, 14));
        jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel3.setText("Recording");
        contentPane.add(jLabel3);
        jLabel3.setBounds(new Rectangle(new Point(155, 400), jLabel3.getPreferredSize()));

        //---- jLabel4 ----
        jLabel4.setFont(new Font("MS Sans Serif", Font.PLAIN, 14));
        jLabel4.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel4.setText("Original");
        contentPane.add(jLabel4);
        jLabel4.setBounds(new Rectangle(new Point(500, 400), jLabel4.getPreferredSize()));

        { // compute preferred size
            Dimension preferredSize = new Dimension();
            for(int i = 0; i < contentPane.getComponentCount(); i++) {
                Rectangle bounds = contentPane.getComponent(i).getBounds();
                preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
            }
            Insets insets = contentPane.getInsets();
            preferredSize.width += insets.right;
            preferredSize.height += insets.bottom;
            contentPane.setMinimumSize(preferredSize);
            contentPane.setPreferredSize(preferredSize);
        }
        pack();
        setLocationRelativeTo(getOwner());
    }//GEN-END:initComponents

    private byte [] stereoToMono(byte [] data) {
        //System.out.println("Converting to mono...");
        byte [] datamono = new byte[data.length / 2];
            for (int i = 0; i < datamono.length/2; i++) {
                int left = (data[i * 4] << 8) | (data[i*4+1] & 0xff);
                int right = (data[i * 4+2] << 8) | (data[i*4+3] & 0xff);
                int avg = (left + right) / 2;
                short m = (short) avg;

                datamono[i*2] = (byte) ((short) (m >> 8));
                datamono[i*2+1] = (byte) (m & 0xff);
            }
        return datamono;
    }
    
    private byte [] monoDownsample(byte [] buffer, int freq) {
        // downsample to 11KHz
        //System.out.println("Downsampling to 11025Hz...");
        
        int skip = freq / 11025;
        int newlen = buffer.length / skip;
        newlen -= newlen % 2;
        
        byte [] ret = new byte[newlen];
        for (int i = 0; i < ret.length; i += skip * 2) {
            ret[i] = buffer[i * skip];
            ret[i+1] = buffer[i*skip + 1];
        }

        return ret;
    }
    private byte [] loadMp3(File soundFile, float start, float duration,
        AudioFormat [] audioformat) {
        
        byte [] data = MP3Decoder.decode(soundFile, start * 1000,
            (start + duration) * 1000, audioformat);
        
        return data;
    }
    
    private byte [] loadWav(File soundFile, float start, float duration,
        AudioFormat [] audioformat) {
       
        AudioInputStream	audioInputStream = null;
        try {
            audioInputStream = AudioSystem.getAudioInputStream(soundFile);
        }
        catch (Exception e) {
                e.printStackTrace();
        }

        AudioFormat	audioFormat = audioInputStream.getFormat();
        audioformat[0] = audioFormat;

        int bps = (int)audioFormat.getSampleRate() * audioFormat.getFrameSize();
        int bufferSize = (int)audioFormat.getSampleRate() * audioFormat.getFrameSize();
        int nBytesRead = 0;
        int totalRead = 0;
        int count = 0;
        
        int startbytes = (int) (bps * start);
        startbytes -= startbytes % 2;
        
        int durationbytes = (int) (bps * duration);
        durationbytes -= durationbytes % 2;
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();                
        
        byte[]	abData = new byte[bufferSize];
        while (nBytesRead != -1) {
            try {
                nBytesRead = audioInputStream.read(abData, 0, abData.length);
                if (nBytesRead > 0) {
                    // need to reverse endian

                    int firstI = Math.max(0, startbytes-count);
                    int lastI = Math.min(startbytes+durationbytes-count, nBytesRead);                    
                    
                    count += nBytesRead;                    
                    
                    if (nBytesRead >= 0 && count >= startbytes) {
                        for (int i = firstI; i < lastI; i += 2) {                                               
                            byte tmp = abData[i];
                            abData[i] = abData[i+1];
                            abData[i+1] = tmp;
                        }
                        baos.write(abData, firstI, lastI-firstI);
                    }
                    
                    if (durationbytes > 0 && count >= startbytes + durationbytes)
                        break;

                }     
            } 
            catch (IOException e) {
                e.printStackTrace();
            }
        }
        byte [] ba = baos.toByteArray();
        
        System.out.println("Read " + ba.length + " bytes at sample rate of " + audioFormat.getSampleRate());

        try {
            audioInputStream.close();
        } catch (IOException e) {
            System.out.println(e);
        }

        return ba;
    }
    
    
    
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser(".");
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension("wav");
        filter.addExtension("mp3");
        filter.setDescription("WAV or STEREO MP3 sound files");
        
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            System.out.println("Chosen file " + file.getAbsolutePath());
            playfn = file.getAbsolutePath();
            
            String t = file.getAbsolutePath().toLowerCase();
            
            AudioFormat [] audioformat = new AudioFormat[1];
            byte [] data;
            
            if (playfn.toLowerCase().endsWith(".mp3"))
                data = loadMp3(file, 0, Float.MAX_VALUE, audioformat);
            else
                data = loadWav(file, 0, Float.MAX_VALUE, audioformat);
            
            if (audioformat[0].getChannels() == 2)
                data = stereoToMono(data);
            
            doneRecording(data, (int) audioformat[0].getSampleRate());
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jListSongsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListSongsMouseClicked
        // TODO add your handling code here:
        int index = + jListSongs.getSelectedIndex();
        if (evt.getClickCount() != 2 || index < 0 || songs.isEmpty())
            return;
        
        //System.out.println("jListSongsMouseClicked(): " + index);
        
        SongData songdata = (SongData) songs.get(index);
        String songfile = (String) songlist.get(songdata.id);
        float start = songdata.db_frame_start / framespersecond;        
        float duration = (songdata.db_frame_end - songdata.db_frame_start)/ framespersecond + endlength;        
        
        if (songfile == null) {
            System.out.println("Can't find original song file - not in database: " + songdata.id);
            return;
        }
        
        File f = new File(songfile);
        
        if (!f.canRead()) {
            System.out.println("Can't read original song file: " + songfile);
            return;
        }
        
        deactivate();
    
        // display wfft info
        AudioFormat [] audioformat = new AudioFormat[1];
        byte [] buffer;
        
        if (songfile.toLowerCase().endsWith(".mp3"))
            buffer = loadMp3(f, start, duration, audioformat);
        else
            buffer = loadWav(f, start, duration, audioformat);
        
        if (audioformat[0].getChannels() == 2)
            buffer = stereoToMono(buffer);
        
        //FFTThread thread = new FFTThread(fftDisplayPanel, dbuffer, freq[0], false);
        //thread.start();
        displayWindowedFFT(buffer, (int) audioformat[0].getSampleRate(), false, false);
        
        //fftDisplayPanel.displayFFT(dbuffer, freq[0], false);
                
        // play song
        jLabelStatus.setText("Playing " + songdata.name + "...");
        System.out.println("Start time: " + start + "  Duration: " + duration);
        
        if (songfile.toLowerCase().endsWith(".mp3"))
            mp3player.play(songfile, start, duration);
        else
            wavplayer.play(songfile, start, duration);
        
        
    }//GEN-LAST:event_jListSongsMouseClicked

    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
        // TODO add your handling code here:
        deactivate();
        jLabelStatus.setText("Playing back recording...");
        if (playfn.toLowerCase().endsWith(".mp3"))
            mp3player.play(playfn);
        else
            wavplayer.play(playfn);
    }//GEN-LAST:event_jButtonPlayActionPerformed

    private void jButtonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecordActionPerformed
        // TODO add your handling code here:
        
        deactivate();
        jListSongs.setListData(new Vector());
        jLabelStatus.setText("Recording...");
        //int time = (jComboBoxRecordTime.getSelectedIndex() + 1) * 5;
        String item = (String) jComboBoxRecordTime.getSelectedItem();
        // extract number
        item = item.substring(0, item.indexOf(' '));
        int time = Integer.parseInt(item);
        System.out.println("Time selection: " + time);
        playfn = RECFN;
        recorder.record(time);
    }//GEN-LAST:event_jButtonRecordActionPerformed
    
    private void deactivate() {
        jButtonPlay.setEnabled(false);
        jButtonRecord.setEnabled(false);
        jComboBoxRecordTime.setEnabled(false);
        jListSongs.setEnabled(false);
        jButtonLoad.setEnabled(false); 
    }
    
    private void activate() {
        jButtonPlay.setEnabled(true);
        jButtonRecord.setEnabled(true);
        jComboBoxRecordTime.setEnabled(true);
        jListSongs.setEnabled(true);
        jButtonLoad.setEnabled(true);
    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        String name = "localhost";
        int port = 2000;
        
        if (args.length < 1 || args.length > 3) {
            System.out.println("Usage: java RetrieveMusicApp wavlist.txt [mrserver_name [mrserver_port] ])");
            return;
        }
        
        String songlistfn = args[0];

        if (args.length == 1)
            System.out.println("No mrserver name specified.  Assuming: " + name);
        else
            name = args[1];
        
        if (args.length < 3)
            System.out.println("No mrserver port specified.  Assuming: " + port);
        else
            port = Integer.parseInt(args[2]);
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (java.lang.Exception e) {
            System.out.println(e);
        }
        new RetrieveMusicApp(songlistfn, name, port).setVisible(true);
        
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new RetrieveMusicApp().setVisible(true);
            }
        });
         */
    }
    
    public void donePlaying() {
        activate();
        jLabelStatus.setText("Ready...");
    }
    

   
    /** Return Vector of SongData */
    private Vector searchDB(byte [] buffer, int freq) {
        Vector songs = new Vector();
        
        //for (int i = 0; i < 10; i++)
        //        System.out.println(i + " " + buffer[i]);

        //for (int i = 0; i < 20; i += 2)
        //        System.out.println(i/2 + " " + (buffer[i]*256 + buffer[i+1]) / 32768f);

        try {
            Socket socket = new Socket(servername, serverport);
            DataOutputStream os = new DataOutputStream(socket.getOutputStream());
            DataInputStream is = new DataInputStream(socket.getInputStream());
       

            System.out.println("Sample length: " + buffer.length);
            os.writeInt(buffer.length);
            os.writeInt(freq);
            os.write(buffer);
            
            int numsongs = is.readInt();
            
            //System.out.println("Num songs: " + numsongs);

            for (int i = 0; i < numsongs; i++) {
                SongData song = new SongData(is);
                songs.add(song);
            }
                
            os.close();
            
            is.close();
            socket.close();
            
        } catch (Exception e) {
            System.out.println(e);
        }
        
        return songs;
    }
    
    private void displayWindowedFFT(byte[] buffer, int freq,
                                    boolean isRecording, boolean clearDisplay) {
        
        if (clearDisplay)
            fftDisplayPanel.clearDisplay();
        
        if (freq != 11025) {
            buffer = monoDownsample(buffer, freq);
            freq = 11025;
        }
        
        double[] dbuffer = new double[buffer.length/2];
        for (int i = 0; i < buffer.length; i += 2) {
            dbuffer[i/2] = ((buffer[i] << 8) | (buffer[i+1]&0xFF)) / 
                           (double) java.lang.Short.MAX_VALUE;      
        }
        
        FFTThread fftThread = new FFTThread(fftDisplayPanel, dbuffer, freq, isRecording);
        fftThread.start();
        //fftDisplayPanel.displayFFT(dbuffer, freq, isRecording);
        
    }
    
    public void doneRecording(byte [] buffer, int freq) {
        
        displayWindowedFFT(buffer, freq, true, true);
        
        jLabelStatus.setText("Searching database...");
        
        jProgressBar.setIndeterminate(true);
        // Vector of SongData
        songs = searchDB(buffer, freq);
        jProgressBar.setIndeterminate(false);
        jProgressBar.setValue(0);
                
        
        Vector songnames = new Vector();
        if (songs.isEmpty()) {
            songnames.add("No matching songs found.");
        } else {
            for (Iterator it = songs.iterator(); it.hasNext(); ) {
                SongData song = (SongData) it.next();
                songnames.add(song.name);
            }
        }        
        jListSongs.setListData(songnames);                
        
        activate();
        jLabelStatus.setText("Ready...");
    }
    
    public void setProgress(int progress) {
        //System.out.println("Setting progress to " + progress);
        jProgressBar.setValue(progress);
    }
    
    public void setLevel(int level) {
        jProgressBarLevel.setValue(level);
    }
     // Variables declaration - do not modify
     
/*    private javax.swing.JPanel fftDisplayHolder;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonRecord;
    private javax.swing.JComboBox jComboBoxRecordTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelLevel;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList jListSongs;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JProgressBar jProgressBarLevel;
    // End of variables declaration*/
    

    // JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - maor yosef
    private JProgressBar jProgressBar;
    private JLabel jLabelStatus;
    private JButton jButtonRecord;
    private JButton jButtonPlay;
    private JComboBox jComboBoxRecordTime;
    private JList jListSongs;
    private JProgressBar jProgressBarLevel;
    private JLabel jLabelLevel;
    private JLabel jLabel2;
    private JButton jButtonLoad;
    private JLabel jLabel1;
    private JPanel fftDisplayHolder;
    private JLabel jLabel3;
    private JLabel jLabel4;
    // JFormDesigner - End of variables declaration  //GEN-END:variables
}

class SongData {
    
    public int db_frame_start;
    
    public int db_frame_end;
    
    public int query_frame_start;
    
    public int query_frame_end;
    
    public String name;
    
    public String id;
    
    public SongData(DataInputStream is) {
        try {
            byte [] line = new byte[11];
            is.readFully(line);
            id = new String(line);

            db_frame_start = is.readInt();
            db_frame_end = is.readInt();
            query_frame_start = is.readInt();
            query_frame_end = is.readInt();

            int len = is.readInt();
            //System.out.println("Line Len: " + len);
            line = new byte[len];
            is.readFully(line);
            name = new String(line).replace('_', ' ');
        } catch (IOException e) {
            System.out.println(e);
        }
        
        /*
        System.out.println("Read song: " + id);
        System.out.println("  DBFS: " + db_frame_start
            + "  DBFE: " + db_frame_end + "  QFS: " + query_frame_start
            + "  QFE: " + query_frame_end);
        System.out.println("  " + name);
         **/
    }
    
}
